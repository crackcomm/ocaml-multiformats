(* Autogenerated by gentable. *)

open Core

(** Tag of multicodec. *)
type tag = [
{{#tags}}
  | `{{symbol}}
{{/tags}}
  | `Unknown ]
[@@deriving bin_io, sexp, compare, equal]

(** Multicodec type. *)
type t = [
{{#data}}
  | `{{name}}
{{/data}}
  | `Other of int ]
[@@deriving bin_io, sexp, compare, equal]

(** [code_of codec] Returns integer code of codec [t]. *)
let code_of = function
  | `Other code -> code
{{#data}}
  | `{{name}} -> {{code}}
{{/data}}
;;

(** [of_code code] Returns codec [t] from integer [code]. *)
let of_code = function
{{#data}}
  | {{code}} -> `{{name}}
{{/data}}
  | code -> `Other code
;;

(** [tag_of codec] Returns [tag] of codec [t]. *)
let tag_of : t -> tag = function
  | `Other _ -> `Unknown
{{#data}}
  | `{{name}} -> `{{tag}}
{{/data}}
;;

{{#tags}}
(** [is_{{tag}} codec] Returns `true` if codec [t] is of tag [`{{symbol}}]. *)
let is_{{tag}} = function
  | `{{symbol}} -> true
  | _ -> false
;;

{{/tags}}
